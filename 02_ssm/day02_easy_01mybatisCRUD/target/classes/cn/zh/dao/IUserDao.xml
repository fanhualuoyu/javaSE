<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="cn.zh.dao.IUserDao">
    <!--查询所有用户-->
    <select id="findAll" resultType="cn.zh.domain.User">
        select * from user;
    </select>

    <!--保存用户-->
    <insert id="saveUser" parameterType="cn.zh.domain.User">
        <!-- 获取插入操作后，获取插入数据的id
            keyProperty属性类中的名称
            keyColumn对应表中的属性
            order取值为AFTER代表插入后的行为
            resultType表示返回值的类型
         -->
        <selectKey keyProperty="id" keyColumn="id" resultType="int" order="AFTER">
            select last_insert_id();
        </selectKey>
        insert into user(username,address,sex,birthday) values(#{username},#{address},#{sex},#{birthday});
    </insert>

    <!--更新用户-->
    <update id="updateUser" parameterType="cn.zh.domain.User">
        update user set username=#{username},address=#{address},sex=#{sex},birthday=#{birthday} where id=#{id};
    </update>

    <!--删除用户-->
    <delete id="deleteUser" parameterType="java.lang.Integer">
        delete from user where id = #{id};
    </delete>

    <!--根据id查询用户-->
    <select id="findById" parameterType="INT" resultType="cn.zh.domain.User">
        select * from user where id =#{id};
    </select>

    <!--根据名称模糊查询-->
    <select id="findByName" parameterType="String" resultType="cn.zh.domain.User">
        select * from user where username like #{username};
        <!-- select * from user where username like '%${value}%' （一般不使用这个）-->
    </select>
    
    <!--获取用户的总记录条数-->
    <select id="findTotal" resultType="java.lang.Integer">
        select count(id) from user;
    </select>

    <!--根据QueryVo的条件查询用户-->
    <select id="findUserByVo" parameterType="cn.zh.domain.QueryVo" resultType="cn.zh.domain.User">
        select * from user where username like #{user.username};
    </select>

    <!--数据库和Bean不匹配时查询所有-->
    <select id="findAllUser" resultType="cn.zh.domain.DoubleUser">
        select id as userId,username as userName,address as userAddress,sex as userSex,birthday as userBirthday from user;
    </select>

    <!--配置查询结果的列名和实体类的属性名的对应关系;
        id是唯一的一个标志，可以随意写;
        查询语句要使用resultMap
    -->
    <resultMap id="userMap" type="cn.zh.domain.DoubleUser">
        <!--主键字段的对应-->
        <id property="userId" column="id"></id>
        <!--非主键字段的对应-->
        <result property="userName" column="username"></result>
        <result property="userAddress" column="address"></result>
        <result property="userSex" column="sex"></result>
        <result property="userBirthday" column="birthday"></result>
    </resultMap>
</mapper>